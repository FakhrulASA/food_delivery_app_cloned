type Product {
  id: ID!
  name: String!
  product_img_url: String
  price: Int!
  description: String
  option: [ProductOption]
  likes: Int
}
type ProductOption {
  name: String!
  choice: [OptionChoice]!
}
type OptionChoice {
  name: String!
  additional_price: Int
}
type ProductByCategory {
  id: ID!
  name: String!
  product_by_category: [Product]!
}
type Category {
  id: ID!
  name: String!
  img_url: String!
}
type Merchant {
  id: ID!
  name: String!
  img_url: String!
  categories: [String]!
  products: [ProductByCategory]!
  rating: Float!
  ratingCount: Int!
  opening: String!
  closing: String!
  isOpen: Boolean!
}
type User {
  id: ID!
  full_name: String!
  email: String!
  deliveryInfo: [DeliveryInfo]!
  token: String!
  status: String!
  createdAt: String!
}
type DeliveryInfo {
  id: ID!
  coordinates: [Float]
  address: String!
  city: String!
  phoneNumber: String!
}
type Order {
  id: ID!
  customer: ID!
  deliveryInfo: DeliveryInfo!
  payment: Payment!
  products: [OrderProductDetail]!
  status: String!
  createdAt: String!
}
type OrderProductDetail {
  menuId: ID!
  quantity: Int!
  total_price: Int!
}
type Payment {
  id: ID!
  method: String!
  createdAt: String!
}
input MerchantInput {
  name: String!
  img_url: String!
  product_categories: [String]!
  products: [ProductInput]
  categories: [String]!
  opening: String!
  closing: String!
}
input ProductInput {
  name: String!
  product_img_url: String!
  product_category: [String]!
  price: Int!
  description: String
}
input PlaceOrderInput {
  landmarks: String!
  address: String!
  city: String!
  phoneNumber: String!
  method: String!
  menuId: ID!
  quantity: Int!
  total_price: Int!
  status: String!
}
input DeliveryInfoInput {
  coordinates: [Float]
  address: String!
  city: String!
  phoneNumber: String!
}
input RegisterInput {
  email: String!
  password: String!
  confirmPassword: String!
}
type Query {
  getMerchants(category: String): [Merchant]
  getMerchant(merchantId: String): Merchant
  getOrders: [Order]
  getCategories: [Category]
}
type Mutation {
  register(registerInput: RegisterInput): User!
  login(email: String!, password: String): User!

  createMerchant(merchantInput: MerchantInput): Merchant!
  deleteMerchant(merchantId: ID!): String!

  deliveryInfo(deliveryInfoInput: DeliveryInfoInput): User!
  deleteDeliveryInfo(deliveryInfoId: ID!): String!

  createCategory(name: String!, img_url: String!): Category!
  deleteCategory(categoryId: ID!): String!

  placeOrder(placeOrderInput: PlaceOrderInput): Order!

  likeProduct(productName: String!): String!
  rateMerchant(merchantId: ID!, rate: Int!): Merchant!
}
type Subscription {
  newOrder: Order!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
