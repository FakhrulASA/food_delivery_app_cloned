type Product {
  id: ID!
  name: String!
  img_url: String!
  description: String!
  categories: [String]!
  likes: [String]!
  likeCount: Int!
}
type Category {
  id: ID!
  name: String!
  img_url: String!
}
type Merchant {
  id: ID!
  name: String!
  img_url: String!
  categories: [String]!
  rating: Float
  opening: String!
  isOpen: Boolean!
}
type Rate {
  id: ID!
  rate: Int!
  username: String!
}
type User {
  id: ID!
  full_name: String!
  username: String!
  email: String!
  deliveryInfo: [DeliveryInfo]!
  token: String!
  createdAt: String!
}
type DeliveryInfo {
  id: ID!
  landmarks: String!
  address: String!
  city: String!
  phoneNumber: String!
}
type Order {
  id: ID!
  customer: ID!
  deliveryInfo: DeliveryInfo!
  payment: Payment!
  products: [OrderProductDetail]!
  status: String!
  createdAt: String!
}
type OrderProductDetail {
  menuId: ID!
  quantity: Int!
  total_price: Int!
}
type Payment {
  id: ID!
  method: String!
  createdAt: String!
}
input RestaurantInput {
  name: String!
  img_url: String!
  categories: [String]!
  isOpen: Boolean!
}
input PlaceOrderInput {
  landmarks: String!
  address: String!
  city: String!
  phoneNumber: String!
  method: String!
  menuId: ID!
  quantity: Int!
  total_price: Int!
  status: String!
}
input DeliveryInfoInput {
  landmarks: String!
  address: String!
  city: String!
  phoneNumber: String!
}
input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
}
input ProductInput {
  name: String!
  img_url: String!
  description: String!
  categories: [String]!
}
type Query {
  getMerchants(category: String): [Merchant]
  getOrders: [Order]
  getCategories: [Category]
  getProducts: [Product]
  getProductByCategory(category: String!): [Product]
}
type Mutation {
  register(registerInput: RegisterInput): User!
  login(username: String!, password: String!): User!

  createRestaurant(restaurantInput: RestaurantInput): Merchant!
  deleteRestaurant(restaurantId: ID!): String!

  deliveryInfo(deliveryInfoInput: DeliveryInfoInput): User!
  deleteDeliveryInfo(deliveryInfoId: ID!): String!

  createProduct(productInput: ProductInput): Product!
  deleteProduct(productId: ID!): String!

  createCategory(name: String!, img_url: String!): Category!
  deleteCategory(categoryId: ID!): String!

  placeOrder(placeOrderInput: PlaceOrderInput): Order!

  likeProduct(productId: ID!): Product!
  rateRestaurant(restaurantId: ID!, rate: Int!): Merchant!
}
type Subscription {
  newOrder: Order!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
